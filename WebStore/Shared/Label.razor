@using System.Reflection
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Globalization;
@using System.Linq.Expressions
@using System.Resources

@if (ChildContent == null)
{
    <label @attributes="AdditionalAttributes" for="@GetComponentName()">@GetDisplayName()</label>
}
else
{
    <label @attributes="AdditionalAttributes">
        @GetDisplayName()
        @ChildContent
    </label>
}

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public Expression<Func<object?>>? For { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? ForId { get; set; }

    [Parameter]
    public string? Text { get; set; }

    public string GetComponentName()
    {
        if (For != null)
        {
            var expression = For.Body as MemberExpression ?? (MemberExpression)((UnaryExpression)For.Body).Operand;
            return ForId ?? expression.Member.Name;
        }
        return string.Empty;
    }

    public string GetDisplayName()
    {
        if (!string.IsNullOrEmpty(Text))
        {
            return Text;
        }
        else if (For != null)
        {
            var member = (For.Body as MemberExpression ?? (MemberExpression)((UnaryExpression)For.Body).Operand).Member;

            return GetFromDisplayAttribute(member) ??
                GetFromDisplayNameAttribute(member) ??
                GetFromMetadataAttribute(member) ??
                member.Name;
        }
        return string.Empty;
    }

    private static string? GetFromDisplayAttribute(MemberInfo member)
    {
        var attr = member.GetCustomAttribute<DisplayAttribute>();
        return GetFromResource(attr) ?? attr?.Name;
    }

    private static string? GetFromDisplayNameAttribute(MemberInfo member)
    {
        var attr = member.GetCustomAttribute<DisplayNameAttribute>();
        return attr?.DisplayName;
    }

    private static string? GetFromMetadataAttribute(MemberInfo member)
    {
        var meta = member.DeclaringType?.GetCustomAttribute<MetadataTypeAttribute>();
        if (meta == null) { return null; }

        var prop = meta.MetadataClassType.GetProperties()
                 .ToList()
                 .Where(p => p.Name == member.Name)
                 .FirstOrDefault();
        if (prop != null)
        {
            return GetFromDisplayAttribute(prop) ??
                GetFromDisplayNameAttribute(prop);
        }
        return null;
    }

    private static string? GetFromResource(DisplayAttribute? attr)
    {
        if (attr?.ResourceType == null) { return null; }

        ResourceManager rm = new ResourceManager(attr.ResourceType);
        return rm.GetString(attr.Name, CultureInfo.CurrentCulture);
    }
}